<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title>git clone时出现 error:inflate:data stream error(incorrect data check)</title>
      <link href="/2018/07/01/git%20clone%20%E5%87%BA%E7%8E%B0data%20stream%20error(incorrect%20data%20check)/"/>
      <url>/2018/07/01/git%20clone%20%E5%87%BA%E7%8E%B0data%20stream%20error(incorrect%20data%20check)/</url>
      <content type="html"><![CDATA[<ol><li>最近在Mac上git clone服务器上的项目时，不管怎么样都clone不下来就算100%也会报错，内容如下</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">remote: Counting objects: 11326, done.</span><br><span class="line">remote: Compressing objects: 100% (7538/7538), done.</span><br><span class="line">remote: Total 11326 (delta 5828), reused 7632 (delta 3000)</span><br><span class="line">Receiving objects: 100% (11326/11326), 153.66 MiB | 258.00 KiB/s, done.</span><br><span class="line">error: inflate: data stream error (incorrect data check)</span><br><span class="line">fatal: serious inflate inconsistency</span><br><span class="line">fatal: index-pack failed</span><br></pre></td></tr></table></figure><p>其实原因很简单，但是因为你的git 版本太低了!~！解决方法：<br>==1.利用brew 安装一个最新的git就行了==如果没有安装brew可<a href="https://brew.sh/index_zh-cn" target="_blank" rel="noopener">参考</a><br>==2.可能是你挂载盘的问题切换到主目录，clone下来，在mv一下==<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#复制这个命令执行即可</span><br><span class="line">/usr/bin/ruby -e &quot;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)&quot;</span><br></pre></td></tr></table></figure></p><ol start="2"><li><p>安装完成之后,执行</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew unlink git</span><br></pre></td></tr></table></figure></li><li><p>然后在执行，下面的命令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew install git</span><br></pre></td></tr></table></figure></li></ol><p>执行完成之后，会提示安装版本和安装路径</p><p>最后把安装路径替换环境变量~/.bash_profile文件，执行<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">export PATH=&quot;/usr/local/git/bin:$PATH&quot;</span><br></pre></td></tr></table></figure></p><ol start="4"><li><p>然后执行source ~/.bash_profile ，立即生效</p></li><li><p>然后新打开一个终端执行git命令就可以了。</p></li></ol>]]></content>
      
      
        <tags>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>linux tomcat虚拟主机配置</title>
      <link href="/2018/06/29/linux%20tomcat%20%E8%99%9A%E6%8B%9F%E4%B8%BB%E6%9C%BA%E9%85%8D%E7%BD%AE/"/>
      <url>/2018/06/29/linux%20tomcat%20%E8%99%9A%E6%8B%9F%E4%B8%BB%E6%9C%BA%E9%85%8D%E7%BD%AE/</url>
      <content type="html"><![CDATA[<h1 id="tomcat虚拟主机配置"><a href="#tomcat虚拟主机配置" class="headerlink" title="tomcat虚拟主机配置"></a>tomcat虚拟主机配置</h1><ol><li><p>安装好<a href="http://tomcat.apache.org//" target="_blank" rel="noopener">tomcat</a> <a href="http://www.nginx.cn/doc/" target="_blank" rel="noopener">nginx</a> 搭建好Java开发环境 也可参照<a href="https://oneinstack.com/auto/" target="_blank" rel="noopener">onestack</a>一键搭建。如图：<br><img src="https://www.wl52056.top/images/blog_tomcat_backq2341.png" alt="image"></p></li><li><p>一键添加虚拟主机</p></li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line">./vhost.sh</span><br><span class="line"></span><br><span class="line">#######################################################################</span><br><span class="line">#       OneinStack for CentOS/RadHat 6+ Debian 7+ and Ubuntu 12+      #</span><br><span class="line">#       For more information please visit https://oneinstack.com      #</span><br><span class="line">#######################################################################</span><br><span class="line"></span><br><span class="line">What Are You Doing?</span><br><span class="line">1. Use HTTP Only</span><br><span class="line">2. Use your own SSL Certificate and Key</span><br><span class="line">3. Use Let&apos;s Encrypt to Create SSL Certificate and Key</span><br><span class="line">q. Exit</span><br><span class="line">Please input the correct option: 2</span><br><span class="line"></span><br><span class="line">Please input domain(example: www.example.com): demo.wl52056.top</span><br><span class="line">domain=demo.wl52056.top</span><br><span class="line"></span><br><span class="line">Please input the directory for the domain:demo.wl52056.top :</span><br><span class="line">(Default directory: /data/wwwroot/demo.wl52056.top): </span><br><span class="line">Virtual Host Directory=/data/wwwroot/demo.wl52056.top</span><br><span class="line"></span><br><span class="line">Create Virtul Host directory......</span><br><span class="line">set permissions of Virtual Host directory......</span><br><span class="line"></span><br><span class="line">Do you want to add more domain name? [y/n]: n</span><br><span class="line"></span><br><span class="line">Do you want to redirect all HTTP requests to HTTPS? [y/n]: y</span><br><span class="line"></span><br><span class="line">You are about to be asked to enter information that will be incorporated</span><br><span class="line">into your certificate request.</span><br><span class="line">What you are about to enter is what is called a Distinguished Name or a DN.</span><br><span class="line">There are quite a few fields but you can leave some blank</span><br><span class="line">For some fields there will be a default value,</span><br><span class="line">If you enter &apos;.&apos;, the field will be left blank.</span><br><span class="line"></span><br><span class="line">Country Name (2 letter code) [CN]: </span><br><span class="line"></span><br><span class="line">State or Province Name (full name) [Shanghai]: </span><br><span class="line"></span><br><span class="line">Locality Name (eg, city) [Shanghai]: </span><br><span class="line"></span><br><span class="line">Organization Name (eg, company) [Example Inc.]: </span><br><span class="line"></span><br><span class="line">Organizational Unit Name (eg, section) [IT Dept.]: </span><br><span class="line"></span><br><span class="line">Do you want to add hotlink protection? [y/n]: n</span><br><span class="line"></span><br><span class="line">Allow Nginx/Tengine/OpenResty access_log? [y/n]: y</span><br><span class="line">You access log file=/data/wwwlogs/demo.wl52056.top_nginx.log</span><br><span class="line"></span><br><span class="line">nginx: [warn] &quot;ssl_stapling&quot; ignored, issuer certificate not found for certificate &quot;/usr/local/nginx/conf/ssl/demo.wl52056.top.crt&quot;</span><br><span class="line">nginx: the configuration file /usr/local/nginx/conf/nginx.conf syntax is ok</span><br><span class="line">nginx: configuration file /usr/local/nginx/conf/nginx.conf test is successful</span><br><span class="line">Reload Nginx......</span><br><span class="line">nginx: [warn] &quot;ssl_stapling&quot; ignored, issuer certificate not found for certificate &quot;/usr/local/nginx/conf/ssl/demo.wl52056.top.crt&quot;</span><br><span class="line">Stoping Tomcat</span><br><span class="line">Using CATALINA_BASE:   /usr/local/tomcat</span><br><span class="line">Using CATALINA_HOME:   /usr/local/tomcat</span><br><span class="line">Using CATALINA_TMPDIR: /usr/local/tomcat/temp</span><br><span class="line">Using JRE_HOME:        /usr/java/jdk1.8.0_141</span><br><span class="line">Using CLASSPATH:       /usr/local/tomcat/bin/bootstrap.jar:/usr/local/tomcat/bin/tomcat-juli.jar</span><br><span class="line">waiting for processes to exit</span><br><span class="line">Starting tomcat</span><br><span class="line">bash: /usr/local/tomcat/bin/startup.sh: Permission denied</span><br><span class="line">Tomcat is not running</span><br><span class="line"></span><br><span class="line">#######################################################################</span><br><span class="line">#       OneinStack for CentOS/RadHat 6+ Debian 7+ and Ubuntu 12+      #</span><br><span class="line">#       For more information please visit https://oneinstack.com      #</span><br><span class="line">#######################################################################</span><br><span class="line">Your domain:                  demo.wl52056.top</span><br><span class="line">Nginx Virtualhost conf:       /usr/local/nginx/conf/vhost/demo.wl52056.top.conf</span><br><span class="line">Tomcat Virtualhost conf:      /usr/local/tomcat/conf/vhost/demo.wl52056.top.xml</span><br><span class="line">Directory of:                 /data/wwwroot/demo.wl52056.top</span><br><span class="line">Self-signed SSL Certificate:  /usr/local/nginx/conf/ssl/demo.wl52056.top.crt</span><br><span class="line">SSL Private Key:              /usr/local/nginx/conf/ssl/demo.wl52056.top.key</span><br><span class="line">SSL CSR File:                 /usr/local/nginx/conf/ssl/demo.wl52056.top.csr</span><br><span class="line">[root@izuf63kacqfe8wm1qfu094z oneinstack]#</span><br></pre></td></tr></table></figure><ol start="3"><li>查看/usr/local/nginx/conf/vhost/demo.wl52056.top.conf和/usr/local/tomcat/conf/vhost/demo.wl52056.top.xml。如果没有自动生成可参考如下：<br>xml:<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;Host name=&quot;demo.wl52056.top&quot; appBase=&quot;/data/wwwroot/demo.wl52056.top&quot; unpackWARs=&quot;true&quot; autoDeploy=&quot;true&quot;&gt;</span><br><span class="line">  &lt;Context path=&quot;&quot; docBase=&quot;/data/wwwroot/demo.wl52056.top&quot; reloadable=&quot;false&quot; crossContext=&quot;true&quot;/&gt;</span><br><span class="line">  &lt;Valve className=&quot;org.apache.catalina.valves.AccessLogValve&quot; directory=&quot;logs&quot;</span><br><span class="line">    prefix=&quot;demo.wl52056.top_access_log&quot; suffix=&quot;.txt&quot; pattern=&quot;%h %l %u %t &amp;quot;%r&amp;quot; %s %b&quot; /&gt;</span><br><span class="line">  &lt;Valve className=&quot;org.apache.catalina.valves.RemoteIpValve&quot; remoteIpHeader=&quot;X-Forwarded-For&quot;</span><br><span class="line">    protocolHeader=&quot;X-Forwarded-Proto&quot; protocolHeaderHttpsValue=&quot;https&quot;/&gt;</span><br><span class="line">&lt;/Host&gt;</span><br></pre></td></tr></table></figure></li></ol><p>conf:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">  listen 80;</span><br><span class="line">  listen 443 ssl http2;</span><br><span class="line">  ssl_certificate /usr/local/nginx/conf/ssl/demo.wl52056.top.crt;</span><br><span class="line">  ssl_certificate_key /usr/local/nginx/conf/ssl/demo.wl52056.top.key;</span><br><span class="line">  ssl_protocols TLSv1 TLSv1.1 TLSv1.2;</span><br><span class="line">  ssl_ciphers EECDH+CHACHA20:EECDH+AES128:RSA+AES128:EECDH+AES256:RSA+AES256:EECDH+3DES:RSA+3DES:!MD5;</span><br><span class="line">  ssl_prefer_server_ciphers on;</span><br><span class="line">  ssl_session_timeout 10m;</span><br><span class="line">  ssl_session_cache builtin:1000 shared:SSL:10m;</span><br><span class="line">  ssl_buffer_size 1400;</span><br><span class="line">  add_header Strict-Transport-Security max-age=15768000;</span><br><span class="line">  ssl_stapling on;</span><br><span class="line">  ssl_stapling_verify on;</span><br><span class="line">  server_name demo.wl52056.top;</span><br><span class="line">  access_log /data/wwwlogs/demo.wl52056.top_nginx.log combined;</span><br><span class="line">  index index.html index.htm index.jsp;</span><br><span class="line">  root /data/wwwroot/demo.wl52056.top;</span><br><span class="line"></span><br><span class="line">  #error_page 404 /404.html;</span><br><span class="line">  #error_page 502 /502.html;</span><br><span class="line"></span><br><span class="line">  location ~ .*\.(gif|jpg|jpeg|png|bmp|swf|flv|mp4|ico)$ &#123;</span><br><span class="line">    expires 30d;</span><br><span class="line">    access_log off;</span><br><span class="line">  &#125;</span><br><span class="line">  location ~ .*\.(js|css|txt)?$ &#123;</span><br><span class="line">    expires 7d;</span><br><span class="line">    access_log off;</span><br><span class="line">  &#125;</span><br><span class="line">  location ~ /\.ht &#123;</span><br><span class="line">    deny all;</span><br><span class="line">  &#125;</span><br><span class="line">  location ~ &#123;</span><br><span class="line">    proxy_pass http://127.0.0.1:8080;</span><br><span class="line">    include proxy.conf;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="4"><li>访问demo.wl52056.top 能访问说明配置成功</li><li><a href="http://blog.wl52056.top/2018/06/29/nginx%20ssl%E9%85%8D%E7%BD%AE(%E5%85%8D%E8%B4%B9ssl%EF%BC%89/" target="_blank" rel="noopener">配置ssl可参考我的另一篇博文</a></li></ol>]]></content>
      
      
        <tags>
            
            <tag> linux tomcat </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>linux mysql 用户配置</title>
      <link href="/2018/06/29/linux%20mysql%20%E7%94%A8%E6%88%B7%E9%85%8D%E7%BD%AE/"/>
      <url>/2018/06/29/linux%20mysql%20%E7%94%A8%E6%88%B7%E9%85%8D%E7%BD%AE/</url>
      <content type="html"><![CDATA[<h1 id="linux-mysql配置"><a href="#linux-mysql配置" class="headerlink" title="linux mysql配置"></a>linux mysql配置</h1><ol><li><a href="https://www.cnblogs.com/bookwed/p/5896619.html" target="_blank" rel="noopener">安装MySQL数据库</a>请参考该网站。</li><li><p>执行mysql -u username -p #username为用户名</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql -u root -p</span><br></pre></td></tr></table></figure></li><li><p>进入mysql，show databases;<br>查看所有的数据库。create database db_name 创建自己数据库<br>实例如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">#查看</span><br><span class="line">$ show databases;</span><br><span class="line">+--------------------+</span><br><span class="line">| Database           |</span><br><span class="line">+--------------------+</span><br><span class="line">| information_schema |</span><br><span class="line">| mysql              |</span><br><span class="line">| performance_schema |</span><br><span class="line">| sys                |</span><br><span class="line">| wl_db              |</span><br><span class="line">+--------------------+</span><br><span class="line">5 rows in set (0.00 sec)</span><br><span class="line"></span><br><span class="line">#创建</span><br><span class="line">$ create database db_name;</span><br><span class="line">Query OK, 1 row affected (0.00 sec)</span><br></pre></td></tr></table></figure></li><li><p>添加用户<br>实例如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">#添加只读用户</span><br><span class="line">GRANT SELECT ON *.* TO &apos;wl_read&apos;@&apos;%&apos; IDENTIFIED BY &quot;wlread&quot;;</span><br><span class="line"></span><br><span class="line">#撤销添加</span><br><span class="line">revoke SELECT ON *.*  from &apos;readonly&apos;@&apos;%&apos;;</span><br><span class="line"></span><br><span class="line">#添加外网可读可写用户</span><br><span class="line">GRANT all privileges ON *.* TO &apos;db_user&apos;@&apos;%&apos; IDENTIFIED BY &quot;wl123@&quot;;</span><br><span class="line"></span><br><span class="line">#记得添加防火墙开放端口</span><br><span class="line">firewall-cmd  --zone=public --add-port=3306/tcp --permanent</span><br></pre></td></tr></table></figure></li></ol><p>基本操作先到这里，后续有什么问题，继续补充</p>]]></content>
      
      
        <tags>
            
            <tag> linux mysql </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>nginx ssl配置（免费ssl）</title>
      <link href="/2018/06/29/nginx%20ssl%E9%85%8D%E7%BD%AE(%E5%85%8D%E8%B4%B9ssl%EF%BC%89/"/>
      <url>/2018/06/29/nginx%20ssl%E9%85%8D%E7%BD%AE(%E5%85%8D%E8%B4%B9ssl%EF%BC%89/</url>
      <content type="html"><![CDATA[<h1 id="nginx-ssl配置（免费ssl）"><a href="#nginx-ssl配置（免费ssl）" class="headerlink" title="nginx ssl配置（免费ssl）"></a>nginx ssl配置（免费ssl）</h1><h3 id="强烈建议有钱人使用付费ssl"><a href="#强烈建议有钱人使用付费ssl" class="headerlink" title="==强烈建议有钱人使用付费ssl=="></a>==强烈建议有钱人使用付费ssl==</h3><ol><li><p>首先在<a href="https://freessl.org" target="_blank" rel="noopener">freessl</a>官网注册账号</p></li><li><p>然后在首页输入你的网站地址 点击创建  <img src="https://www.wl52056.top/images/blog_201806_back1.png" alt="image"></p></li></ol><ol><li><p>点击把文件下载，把下载下来的文件放到提示的目录下面(‘.well-known/pki-validation’)  <img src="https://www.wl52056.top/images/blog_back_201806123.png" alt="image">  ==ps:能复制就不要手写 ==</p><p> ==ps:记得关闭防火墙，开放端口，在这里我是浪费了很多时间，nginx记得配置txt能访问到==</p></li></ol><blockquote><pre><code>firewall-cmd  --zone=public --add-port=80/tcp</code></pre></blockquote><ol><li><p>最后点击验证。通过之后会提供证书压缩文件给你下载  <img src="https://www.wl52056.top/images/blog_nginx_config_back221.png" alt="image"></p></li><li><p>最最后配置你的nginx</p></li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">  listen 80;</span><br><span class="line">  listen 443 ssl http2;</span><br><span class="line">  ssl_certificate /usr/local/nginx/conf/ssl/app.wl52056.top.pem;</span><br><span class="line">  ssl_certificate_key /usr/local/nginx/conf/ssl/app.wl52056.top.key;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li><p>验证一下访问你配置的域名</p><p><img src="https://www.wl52056.top/images/blog_nginx_back_https234.png" alt="image"><br>访问成功,说明配置成功</p></li></ol>]]></content>
      
      
        <tags>
            
            <tag> nginx linux </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Android gradle 下载目录更改</title>
      <link href="/2018/05/22/Android%20gradle%20%E4%B8%8B%E8%BD%BD%E7%9B%AE%E5%BD%95%E6%9B%B4%E6%94%B9/"/>
      <url>/2018/05/22/Android%20gradle%20%E4%B8%8B%E8%BD%BD%E7%9B%AE%E5%BD%95%E6%9B%B4%E6%94%B9/</url>
      <content type="html"><![CDATA[<h3 id="通常我们gradle下载目录在用户下面例如window在user-admin-gradle目录下，"><a href="#通常我们gradle下载目录在用户下面例如window在user-admin-gradle目录下，" class="headerlink" title="通常我们gradle下载目录在用户下面例如window在user/admin/.gradle目录下，"></a>通常我们gradle下载目录在用户下面例如window在user/admin/.gradle目录下，</h3><h3 id="但是这个gradle可能项目不一样，下载的gradle本-也不一样就会导致C盘内存空间减少，那有啥好办法没呢"><a href="#但是这个gradle可能项目不一样，下载的gradle本-也不一样就会导致C盘内存空间减少，那有啥好办法没呢" class="headerlink" title="但是这个gradle可能项目不一样，下载的gradle本  也不一样就会导致C盘内存空间减少，那有啥好办法没呢"></a>但是这个gradle可能项目不一样，下载的gradle本  也不一样就会导致C盘内存空间减少，那有啥好办法没呢</h3><h3 id="答案肯定是有的"><a href="#答案肯定是有的" class="headerlink" title="答案肯定是有的"></a>答案肯定是有的</h3><p>在你项目的gradle.properties文件下添加一句</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gradle.user.home=D:/Cache/.gradle</span><br></pre></td></tr></table></figure><p>但是这也有个缺点就是每个项目都要加。</p>]]></content>
      
      
        <tags>
            
            <tag> Android gradle </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Android 常见问题</title>
      <link href="/2018/05/22/Android%E5%BC%80%E5%8F%91%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98/"/>
      <url>/2018/05/22/Android%E5%BC%80%E5%8F%91%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98/</url>
      <content type="html"><![CDATA[<ol><li><p>常常在gradle编译时，出现异常，但是打印的异常信息较少不能准确定位到底是哪里有问题可执行如下命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gradlew processDebugManifest --stacktrace</span><br></pre></td></tr></table></figure></li><li><p>查看当前activity</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb shell dumpsys activity activities</span><br></pre></td></tr></table></figure></li><li><p>Android Gson 对象Map转换 <a href="https://www.cnblogs.com/zsychanpin/p/6937832.html" target="_blank" rel="noopener">参考</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">JSONParse pare = new JSONParse();</span><br></pre></td></tr></table></figure></li><li><p>Android 颜色透明值列表<br><img src="http://note.youdao.com/noteshare?id=20681fb6df01851fe8ea60d402f99503&amp;sub=WEB4ec96fecb271d9675b9402a181090220" alt="image"></p></li><li><p>Android 一个键盘监听变化<a href="https://github.com/18511084155/KeyboardWatcher" target="_blank" rel="noopener">框架</a></p></li><li><p>Android build项目的时候Re-download dependencies and sync project (requires network)<br> 解决方法：</p><ul><li>第一种方法删除.gradle文件夹<br><img src="http://note.youdao.com/noteshare?id=889dfd7dbf849b1f26470c6b55d921c8&amp;sub=234C405A59BE465686F4183B84502171" alt="image"></li><li>第二种方法修改项目中gradle-wrapper.properties gradle版本</li></ul></li><li><p>Android 对TextView进行各种操作SpannableString 这个类很神奇详情请百度</p></li><li><p>Android 一个封装的很不错的pupwindow组件<a href="https://github.com/crazyqiang/AndroidStudy/tree/master/app/src/main/java/org/ninetripods/mq/study/popup" target="_blank" rel="noopener">库</a></p></li><li><p>Android gradle 打包部署指南。<a href="https://www.jianshu.com/p/d7279528e661" target="_blank" rel="noopener">gradle</a></p></li></ol>]]></content>
      
      
        <tags>
            
            <tag> Android </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Android jenkins 自动化部署</title>
      <link href="/2018/04/27/Android%20Jenkins%20%E8%87%AA%E5%8A%A8%E5%8C%96%E9%83%A8%E7%BD%B2/"/>
      <url>/2018/04/27/Android%20Jenkins%20%E8%87%AA%E5%8A%A8%E5%8C%96%E9%83%A8%E7%BD%B2/</url>
      <content type="html"><![CDATA[<p>==ps:首先重要的条件是有一台已经装好jenkins服务器 具体安装jenkins到服务器请参考<a href="https://www.cnblogs.com/h--d/p/5673085.html" target="_blank" rel="noopener">这里</a> ==</p><h3 id="首先在jenkins上做好准备工作，那就是装插件"><a href="#首先在jenkins上做好准备工作，那就是装插件" class="headerlink" title="首先在jenkins上做好准备工作，那就是装插件"></a>首先在jenkins上做好准备工作，那就是装插件</h3><p>系统管理-&gt; 插件管理<br><img src="http://note.youdao.com/yws/res/1114/45DF43AFAD8F458F8C657587E8AFC2B6" alt="image"></p><p><strong>装好github、gradle等插件</strong></p><ol><li><p>第一步新建：<br>在Jenkins服务器上新建任务，取一个响亮的名字，选择构建一个自由风格的软件项目，轻轻的点击确定按钮，任务就建好了，系统自动进入Jenkins任务配置页面</p></li><li><p>第二步配置：<br>添加描述；源码管理，添加路径，添加用户密码，添加分支（记得装github插件）；<br><img src="https:///note.youdao.com/yws/res/1105/D66A4D151FA5400E9F71864AF6E02D62" alt="image"></p></li><li><p>第三步构建项目触发器：<br>在你的gogs项目仓库设置中管理web钩子<br><img src="https:////note.youdao.com/yws/res/1192/A0F08A3BF29440F4B4A458D358FF5D76" alt="image"></p></li><li><p>第四步构建：<br>现在android的项目是用gradle构建，所以要选择invoke gradle script （记得先装gradle插件）<br><img src="https://note.youdao.com/yws/res/1108/7044307C7AD0468D8FD9BB89DFDDA312" alt="image"></p></li><li><p>添加一个execute shell </p></li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#如执行打包命令 到command</span><br><span class="line">./gradlew assebleDebug/assembleRelease</span><br></pre></td></tr></table></figure><p><img src="https://note.youdao.com/yws/res/1120/06F5093ABC024C6287E493F86A445698" alt="image"></p><ol start="6"><li><p>接下来添加你要上传的平台（例如蒲公英）（记得装蒲公英插件）<a href="https://www.pgyer.com/doc/view/jenkins_plugin" target="_blank" rel="noopener">教程</a><br><img src="https://note.youdao.com/yws/res/1129/BB3372B237A34270BB2C0036FB34ED6A" alt="image"></p></li><li><p>接下来在添加一个excute shell 可以进行通知，（比如说钉钉机器人）<br><img src="https://note.youdao.com/yws/res/1140/9810A2C7743249F7955600269CE495C1" alt="image"></p></li></ol><p><strong>==就此完成。看似简单但是也有很多坑：==</strong></p><ol><li>要在jenkins服务器上把环境变量弄好，ANDROID_HOME,JAVA_HOME,GRADLE_HOME<br>首先：<a href="http://dl.google.com/android/android-sdk_r24.4.1-linux.tgzSDK" target="_blank" rel="noopener">http://dl.google.com/android/android-sdk_r24.4.1-linux.tgzSDK</a><br>然后：配置环境变量linux下（/etc/profile）</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">export ANDROID_HOME=&apos;/opt/android-sdk-linux&apos;  </span><br><span class="line">export PATH=$ANDROID_HOME/tools:$PATH  </span><br><span class="line">export PATH=$ANDROID_HOME/platform-tools:$PATH</span><br></pre></td></tr></table></figure><ol start="2"><li>安装android sdk 所有的包</li></ol><pre><code><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">android update sdk --no-ui</span><br></pre></td></tr></table></figure>这样太占内存也可以使用 <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sdkmanager &quot;platform-tools&quot; &quot;platforms;android-26&quot;</span><br><span class="line"></span><br><span class="line">sdkmanager  &quot;build-tools;26.0.2&quot;</span><br></pre></td></tr></table></figure>下载指定的包，节省空间也可以使用<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">android list</span><br></pre></td></tr></table></figure> sdk命令查看有哪些包更新，然后通过$ ./android  update sdk -u -t  序号如：安装Build-tools, revision 24.0.3<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ./android update sdk -u -t 3</span><br></pre></td></tr></table></figure>需要同意license，输入 y 回车即可</code></pre>]]></content>
      
      
        <tags>
            
            <tag> Android jenkins </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Git 常用操作指南</title>
      <link href="/2018/04/27/Git%20%E5%B8%B8%E7%94%A8%E6%93%8D%E4%BD%9C%E6%8C%87%E5%8D%97/"/>
      <url>/2018/04/27/Git%20%E5%B8%B8%E7%94%A8%E6%93%8D%E4%BD%9C%E6%8C%87%E5%8D%97/</url>
      <content type="html"><![CDATA[<h1 id="Git-常用操作指南"><a href="#Git-常用操作指南" class="headerlink" title="Git 常用操作指南"></a>Git 常用操作指南</h1><ol><li><p>在我们常常去git 上clone一个项目的时候，会要求用户名和密码，这样输入会比较麻烦，这里给大家介绍一个好的git clone的方法</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone http://username:userpwd@192.168.1.103:3000/projectname/android-demo.git</span><br></pre></td></tr></table></figure></li><li><p>在我们git pull 或者git push 的时候常常要我们输入密码，每次都要输入，是不是很烦，设置一下吧</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git config --global credential.helper store</span><br></pre></td></tr></table></figure></li><li><p>查看提交历史</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git log --pretty=oneline --abbrev-commit</span><br></pre></td></tr></table></figure></li><li><p>给历史打tag</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git tag v1.0 6224937</span><br></pre></td></tr></table></figure></li><li><p>推送打tag</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push origin v1.0</span><br></pre></td></tr></table></figure></li></ol>]]></content>
      
      
        <tags>
            
            <tag> Git </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Flutter 初识</title>
      <link href="/2018/04/10/flutter%E5%88%9D%E8%AF%86/"/>
      <url>/2018/04/10/flutter%E5%88%9D%E8%AF%86/</url>
      <content type="html"><![CDATA[<p>Flutter google为了更方便的实现跨平台的 material design 和高性能的渲染移动应用开发而的混合开发框架</p><h3 id="Flutter-特性："><a href="#Flutter-特性：" class="headerlink" title="Flutter 特性："></a>Flutter 特性：</h3><p>1.Fast Development<br>2.Expressive, beautiful UIs<br>3.Modern, reactive framework</p><h3 id="Flutter入门"><a href="#Flutter入门" class="headerlink" title="Flutter入门"></a>Flutter入门</h3><p>作为一个移动开发者，不去了解新出来的混合开发框架是不合适的。今天我们就来看看大google的Flutter混合框架吧。</p><ol><li><p>做开发当然第一步当然是配置开发环境：</p><ul><li><p>clone flutter项目</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone -b beta https://github.com/flutter/flutter.git</span><br></pre></td></tr></table></figure></li><li><p>然后在设置环境变量（这个我就不说怎么设置环境变量了）</p></li><li><p>运行flutter doctor 要安装（SDK,Dart插件，Flutter插件，连接一台Android机）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">flutter doctor</span><br><span class="line">#他会提示你有哪些环境没有配置好，你可根据他的提示一步步找问题</span><br></pre></td></tr></table></figure><p>==关于Android sdk最好是下载一个新的，如果是老的，会有很多问题==</p><p>最后如果flutter doctor 都没有问题了，说明环境变量配置成功。</p></li></ul></li><li><p>在安装Dart和Flutter插件之后，就可以在Android studio新建一个Flutter项目<br><img src="https://www.wl52056.top/images/flutter_blog_back34123.png" alt="image"></p></li><li><p>创建完之后，就可以运行Flutter项目啦<br><img src="https://www.wl52056.top/images/blog_flutter_backq34134.png" alt="image"></p></li><li><p>完成</p></li></ol>]]></content>
      
      
        <tags>
            
            <tag> 混合开发 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>手把手搭建一个免费的Vpn</title>
      <link href="/2018/01/02/%E6%89%8B%E6%8A%8A%E6%89%8B%E6%90%AD%E5%BB%BA%E4%B8%80%E4%B8%AA%E5%85%8D%E8%B4%B9%E7%9A%84vpn/"/>
      <url>/2018/01/02/%E6%89%8B%E6%8A%8A%E6%89%8B%E6%90%AD%E5%BB%BA%E4%B8%80%E4%B8%AA%E5%85%8D%E8%B4%B9%E7%9A%84vpn/</url>
      <content type="html"><![CDATA[<h1 id="手把手教你弄一个免费一年的VPN翻墙服务"><a href="#手把手教你弄一个免费一年的VPN翻墙服务" class="headerlink" title="手把手教你弄一个免费一年的VPN翻墙服务"></a>手把手教你弄一个免费一年的VPN翻墙服务</h1><p>作为一个开发人员，都知道百度搜索的坑，所以都想使用Google来搜索一些问题，毕竟国外大神也是挺多的。但是Google因为在2012就已经退出中国市场，访问免不了要一个翻墙利器。今天我来给大家介绍怎么弄个免费一年的翻墙服务吧！</p><h3 id="一、首先自己能翻墙访问Google。"><a href="#一、首先自己能翻墙访问Google。" class="headerlink" title="一、首先自己能翻墙访问Google。"></a>一、首先自己能翻墙访问Google。</h3><p>那有人就说了，我既然能翻墙了，还要你那个干嘛，这样说的好像很有道理样子，你可以出门右转了。其实呢，我们这个翻墙只是为了能获取这个免费的一年的翻墙服务的一个先决条件，可以听我细细道来：</p><p>你可以先在网上找一个收费的，但一般都会有免费试用，打个譬如<a href="https://getlantern.org/zh_CN/" target="_blank" rel="noopener">蓝灯</a></p><p>打开蓝灯，一般都会有一个月300M的试用流量，你电脑的右下边就会出现他的图标,你就可以使用了，（有的时候网络可能不太好，但是没有关系，它总会好的，@~@）确定自己能翻墙之后</p><h3 id="二、需要一张visa或者mastercard"><a href="#二、需要一张visa或者mastercard" class="headerlink" title="二、需要一张visa或者mastercard"></a>二、需要一张visa或者mastercard</h3><p>因为它会验证你的信用卡是否真实有效，会扣款1美元，然后又会返回给你，所以不用担心</p><h3 id="三、打开-cloud-google-com"><a href="#三、打开-cloud-google-com" class="headerlink" title="三、打开 cloud.google.com"></a>三、打开 cloud.google.com</h3><ul><li><p>如果你有google账号，最好了，直接登录，没有呢，那没办法了，注册一个呗，反正免费注册的，注册这种东西，我就不赘述了，你们自行百度。</p></li><li><p>接着你会发现有一个免费试用按钮，点击免费试用，它会让你填写一些你的信息，直接填写就好了，然后你就是让你填写你的信用卡信息就好了，然后就成功了，它会跳转到这个页面<br><img src="https://wl52056.top/images/vpn_service_back134.png" alt="image"><br>说明一切正常</p></li><li>然后点击左上角，选择Compute 选择vm实例，新建一个实例。如图：<br><img src="https://wl52056.top/images/blog_vpn_back12341234.png" alt="image"><br>点击上边的创建实例，配置选择可参考我的，如图：<br><img src="https://wl52056.top/images/blog_vpn_back344234.png" alt="image"><br>==因为只是做一个vpn服务器，不需要多高的配置，没必要浪费==</li><li>创建成功之后你的VM实例列表中就会有多个实例，点击ssh,在浏览器打开<br><img src="https://wl52056.top/images/blog_vpn_back4545245.png" alt="image"></li></ul><ol><li>输入命令：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo -i</span><br></pre></td></tr></table></figure></li></ol><p>切换到root用户下面。</p><ol start="2"><li>安装bbr<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget -N --no-check-certificate https://raw.githubusercontent.com/FunctionClub/YankeeBBR/master/bbr.sh &amp;&amp; bash bbr.sh install</span><br></pre></td></tr></table></figure></li></ol><p>蓝底窗口按TAB键选NO</p><p>选择重启 Y</p><p>这里会断开连接，大家可以关掉窗口再重新打开或几秒钟后在界面随便按几个字母 便会提示重新连接。</p><ol start="3"><li>sudo -i 再次切换到root用户下边</li><li><p>启动bbr</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bash bbr.sh start</span><br></pre></td></tr></table></figure></li><li><p>获取ssr脚本</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget --no-check-certificate https://raw.githubusercontent.com/teddysun/shadowsocks_install/master/shadowsocksR.sh &amp;&amp; chmod +x shadowsocksR.sh</span><br></pre></td></tr></table></figure></li><li><p>执行ssr脚本</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./shadowsocksR.sh</span><br></pre></td></tr></table></figure></li></ol><p>输入shadowsocks 密码</p><p>输入<strong>端口号</strong></p><p>其他一路回车（也可自行选择混淆 协议）</p><p>在最后出现红底数据以后,</p><ol start="7"><li><p>去谷歌云防火墙规则添加新的防火墙规则<br><img src="https://wl52056.top/images/blog_vpn_back45o0452.png" alt="image"><br>如图：<br><img src="https://wl52056.top/images/blog_vpn_back20180703162421.png" alt="image"><br>填入你自己定义的端口号，类似tcp;udp:5665</p></li><li><p>然后就可以自己去下载一个客服端测试是否可用啦</p></li></ol><p><a href="https://github.com/qinyuhang/ShadowsocksX-NG-R/releases" target="_blank" rel="noopener">mac下载地址</a></p><p><a href="https://github.com/shadowsocksrr/shadowsocksr-csharp/releases" target="_blank" rel="noopener">pc下载地址</a></p><p><a href="https://wl52056.top/images/ssr-android.apk" target="_blank" rel="noopener">Android下载地址</a></p><p>iOS下载地址必须有一个非大陆的appleid才行，Apple Store下载wingy就行了</p><ol start="9"><li>运行ssr软件，右击服务器设置/编辑服务器，添加自己的翻墙服务器地址，端口，密码，混淆规则到shadowsocksrr客服端<br><img src="https://wl52056.top/images/blog_vpn_back20180703163234.png" alt="image"></li><li>右击小飞机选择服务器，选择你自己添加的服务器，还可以选择代理模式和代理规则。然后就可以啦。</li></ol>]]></content>
      
      
        <tags>
            
            <tag> vpn </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Android 进程保活通用方法</title>
      <link href="/2017/12/23/Android%20%E8%BF%9B%E7%A8%8B%E4%BF%9D%E6%B4%BB%E9%80%9A%E7%94%A8%E6%96%B9%E6%B3%95/"/>
      <url>/2017/12/23/Android%20%E8%BF%9B%E7%A8%8B%E4%BF%9D%E6%B4%BB%E9%80%9A%E7%94%A8%E6%96%B9%E6%B3%95/</url>
      <content type="html"><![CDATA[<h1 id="Android-应用保活"><a href="#Android-应用保活" class="headerlink" title="Android 应用保活"></a>Android 应用保活</h1><p>这是一篇我在网上发现的一篇不错的文章所以转载下来了<a href="https://blog.csdn.net/u013263323/article/details/56285475" target="_blank" rel="noopener">原文</a></p><p>自己曾经也在这个问题上伤过脑经，前几日刚好有一个北京的哥们在QQ说在做IM类的项目，问我进程保活如何处理比较恰当，决定去总结一下，网上搜索一下进程常驻的方案好多好多，但是很多的方案都是不靠谱的或者不是最好的，结合很多资料，今天总结一下Android进程保活的一些方案，都附有完整的实现源码，有些可能你已经知道，但是有些你可能是第一次听说，（1像素Activity，前台服务，账号同步，Jobscheduler,相互唤醒，系统服务捆绑，如果你都了解了，请忽略）经过多方面的验证，Android系统中在没有白名单的情况下做一个任何情况下都不被杀死的应用是基本不可能的，但是我们可以做到我们的应用基本不被杀死，如果杀死可以马上满血复活，原谅我讲的特别含蓄，毕竟现在的技术防不胜防啊，不死应用还是可能的。</p><p>有几个问题需要思考，系统为什么会杀掉进程，杀的为什么是我的进程，这是按照什么标准来选择的，是一次性干掉多个进程，还是一个接着一个杀，保活套路一堆，如何进行进程保活才是比较恰当……如果这些问题你还还存在，或许这篇文章可以解答。</p><h3 id="一、进程初步了解"><a href="#一、进程初步了解" class="headerlink" title="一、进程初步了解"></a>一、进程初步了解</h3><p>每一个Android应用启动后至少对应一个进程，有的是多个进程，而且主流应用中多个进程的应用比例较大<br><img src="http://upload-images.jianshu.io/upload_images/1836169-6021bfa515d37f05.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"></p><h4 id="1-如何查看进程解基本信息"><a href="#1-如何查看进程解基本信息" class="headerlink" title="1. 如何查看进程解基本信息"></a>1. 如何查看进程解基本信息</h4><p>对于任何一个进程，我们都可以通过adb shell ps|grep 的方式来查看它的基本信息</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">C:\Users\admin&gt;adb shell</span><br><span class="line">root@vbox86p:/ # ps|grep com.example.project</span><br><span class="line">u0_a62    1571  125   1064644 88376 00000000 f7714915 S com.example.project:core</span><br></pre></td></tr></table></figure><table><thead><tr><th>值</th><th>解释</th></tr></thead><tbody><tr><td>u0_a62</td><td>USER 进程当前用户</td></tr><tr><td>1571</td><td>进程ID</td></tr><tr><td>125</td><td>进程的父进程ID</td></tr><tr><td>1064644</td><td>进程的虚拟内存大小</td></tr><tr><td>88376</td><td>实际驻留“在内存中”的内存大小</td></tr><tr><td>com.example.project:core</td><td>进程名</td></tr></tbody></table><h4 id="2、进程划分"><a href="#2、进程划分" class="headerlink" title="2、进程划分"></a>2、进程划分</h4><p>Android中的进程跟封建社会一样，分了三流九等，Android系统把进程的划为了如下几种（重要性从高到低），网上多位大神都详细总结过（备注：严格来说是划分了6种）。</p><h5 id="2-1、前台进程-Foreground-process"><a href="#2-1、前台进程-Foreground-process" class="headerlink" title="2.1、前台进程(Foreground process)"></a>2.1、前台进程(Foreground process)</h5><p>场景： </p><ul><li>某个进程持有一个正在与用户交互的Activity并且该Activity正处于resume的状态。 </li><li>某个进程持有一个Service，并且该Service与用户正在交互的Activity绑定。 </li><li>某个进程持有一个Service，并且该Service调用startForeground()方法使之位于前台运行。 </li><li>某个进程持有一个Service，并且该Service正在执行它的某个生命周期回调方法，比如onCreate()、 onStart()或onDestroy()。 </li><li>某个进程持有一个BroadcastReceiver，并且该BroadcastReceiver正在执行其onReceive()方法。</li></ul><p>用户正在使用的程序，一般系统是不会杀死前台进程的，除非用户强制停止应用或者系统内存不足等极端情况会杀死。</p><h5 id="2-2、可见进程-Visible-process"><a href="#2-2、可见进程-Visible-process" class="headerlink" title="2.2、可见进程(Visible process)"></a>2.2、可见进程(Visible process)</h5><p>场景： </p><ul><li>拥有不在前台、但仍对用户可见的 Activity（已调用 onPause()）。 </li><li>拥有绑定到可见（或前台）Activity 的 Service</li></ul><p>用户正在使用，看得到，但是摸不着，没有覆盖到整个屏幕,只有屏幕的一部分可见进程不包含任何前台组件，一般系统也是不会杀死可见进程的，除非要在资源吃紧的情况下，要保持某个或多个前台进程存活</p><h5 id="2-3、服务进程-Service-process"><a href="#2-3、服务进程-Service-process" class="headerlink" title="2.3、服务进程(Service process)"></a>2.3、服务进程(Service process)</h5><p>场景 </p><ul><li>某个进程中运行着一个Service且该Service是通过startService()启动的，与用户看见的界面没有直接关联。</li></ul><p>在内存不足以维持所有前台进程和可见进程同时运行的情况下，服务进程会被杀死</p><h5 id="2-4、后台进程-Background-process"><a href="#2-4、后台进程-Background-process" class="headerlink" title="2.4、后台进程(Background process)"></a>2.4、后台进程(Background process)</h5><p>场景： </p><ul><li>在用户按了”back”或者”home”后,程序本身看不到了,但是其实还在运行的程序，比如Activity调用了onPause方法</li></ul><p>系统可能随时终止它们，回收内存</p><h5 id="2-5、空进程-Empty-process"><a href="#2-5、空进程-Empty-process" class="headerlink" title="2.5、空进程(Empty process)"></a>2.5、空进程(Empty process)</h5><p>场景： </p><ul><li>某个进程不包含任何活跃的组件时该进程就会被置为空进程，完全没用,杀了它只有好处没坏处,第一个干它!</li></ul><h4 id="3、内存阈值"><a href="#3、内存阈值" class="headerlink" title="3、内存阈值"></a>3、内存阈值</h4><p>上面是进程的分类，进程是怎么被杀的呢？系统出于体验和性能上的考虑，app在退到后台时系统并不会真正的kill掉这个进程，而是将其缓存起来。打开的应用越多，后台缓存的进程也越多。在系统内存不足的情况下，系统开始依据自身的一套进程回收机制来判断要kill掉哪些进程，以腾出内存来供给需要的app, 这套杀进程回收内存的机制就叫 Low Memory Killer。那这个不足怎么来规定呢，那就是内存阈值，我们可以使用cat /sys/module/lowmemorykiller/parameters/minfree来查看某个手机的内存阈值。 </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">root@vbox86p:/ #  cat /sys/module/lowmemorykiller/parameters/minfree</span><br><span class="line">18432，23040，27648，32256，36864，46080</span><br></pre></td></tr></table></figure><p>注意这些数字的单位是page. 1 page = 4 kb.上面的六个数字对应的就是(MB): 72,90,108,126,144,180，这些数字也就是对应的内存阀值,内存阈值在不同的手机上不一样，一旦低于该值,Android便开始按顺序关闭进程. 因此Android开始结束优先级最低的空进程，即当可用内存小于180MB(46080*4/1024)。</p><p>读到这里，你或许有一个疑问，假设现在内存不足，空进程都被杀光了，现在要杀后台进程，但是手机中后台进程很多，难道要一次性全部都清理掉？当然不是的，进程是有它的优先级的，这个优先级通过进程的adj值来反映，它是linux内核分配给每个系统进程的一个值，代表进程的优先级，进程回收机制就是根据这个优先级来决定是否进行回收，adj值定义在com.android.server.am.ProcessList类中，这个类路径是${android-sdk-path}\sources\android-23\com\android\server\am\ProcessList.java。oom_adj的值越小，进程的优先级越高，普通进程oom_adj值是大于等于0的，而系统进程oom_adj的值是小于0的，我们可以通过cat /proc/进程id/oom_adj可以看到当前进程的adj值</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">1|root@vbox86p:/ # ps|grep com.example.project</span><br><span class="line">u0_a62    1630  126   1062596 90144 00000000 f7759915 S com.pty.project</span><br><span class="line">root@vbox86p:/ # cat /proc/1630/oom_adj</span><br><span class="line">0</span><br></pre></td></tr></table></figure><p>看到adj值是0，0就代表这个进程是属于前台进程，我们按下Back键，将应用至于后台，再次查看<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">root@vbox86p:/ # cat /proc/1887/oom_adj</span><br><span class="line">0</span><br><span class="line">root@vbox86p:/ # cat /proc/1887/oom_adj</span><br><span class="line">8</span><br></pre></td></tr></table></figure></p><p>adj值变成了8，8代表这个进程是属于不活跃的进程，你可以尝试其他情况下，oom_adj值是多少，但是每个手机的厂商可能不一样，oom_adj值主要有这么几个，可以参考一下。</p><table><thead><tr><th>adj级别</th><th>值</th><th>解释</th></tr></thead><tbody><tr><td>UNKNOWN_ADJ</td><td>16</td><td>预留的最低级别，一般对于缓存的进程才有可能设置成这个级别</td></tr><tr><td>CACHED_APP_MAX_ADJ</td><td>15</td><td>缓存进程，空进程，在内存不足的情况下就会优先被kill</td></tr><tr><td>CACHED_APP_MIN_ADJ</td><td>9</td><td>缓存进程，也就是空进程</td></tr><tr><td>SERVICE_B_ADJ</td><td>8</td><td>不活跃的进程</td></tr><tr><td>PREVIOUS_APP_ADJ</td><td>7</td><td>切换进程</td></tr><tr><td>HOME_APP_ADJ</td><td>6</td><td>与Home交互的进程</td></tr><tr><td>SERVICE_ADJ</td><td>5</td><td>有Service的进程</td></tr><tr><td>HEAVY_WEIGHT_AP6P_ADJ</td><td>4</td><td>高权重进程</td></tr><tr><td>BACKUP_APP_ADJ</td><td>3</td><td>正在备份的进程</td></tr><tr><td>PERCEPTIBLE_APP_ADJ</td><td>2</td><td>可感知的进程，比如那种播放音乐</td></tr><tr><td>VISIBLE_APP_ADJ</td><td>1</td><td>可见进程</td></tr><tr><td>FOREGROUND_APP_ADJ</td><td>0</td><td>前台进程</td></tr><tr><td>PERSISTENT_SERVICE_ADJ</td><td>-11</td><td>重要进程</td></tr><tr><td>PERSISTENT_PROC_ADJ</td><td>-12</td><td>核心进程</td></tr><tr><td>SYSTEM_ADJ</td><td>-16</td><td>系统进程</td></tr><tr><td>NATIVE_ADJ</td><td>-17</td><td>系统起的Native进程</td></tr></tbody></table><p>备注：（上表的数字可能在不同系统会有一定的出入）</p><p>根据上面的adj值，其实系统在进程回收跟内存回收类似也是有一套严格的策略，可以自己去了解，大概是这个样子的，oom_adj越大，占用物理内存越多会被最先kill掉，OK，那么现在对于进程如何保活这个问题就转化成，如何降低oom_adj的值，以及如何使得我们应用占的内存最少。</p><h3 id="二、进程保活方案"><a href="#二、进程保活方案" class="headerlink" title="二、进程保活方案"></a>二、进程保活方案</h3><h4 id="1、开启一个像素的Activity"><a href="#1、开启一个像素的Activity" class="headerlink" title="1、开启一个像素的Activity"></a>1、开启一个像素的Activity</h4><p>据说这个是手Q的进程保活方案，基本思想，系统一般是不会杀死前台进程的。所以要使得进程常驻，我们只需要在锁屏的时候在本进程开启一个Activity，为了欺骗用户，让这个Activity的大小是1像素，并且透明无切换动画，在开屏幕的时候，把这个Activity关闭掉，所以这个就需要监听系统锁屏广播，我试过了，的确好使，如下。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">public class MainActivity extends AppCompatActivity &#123;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    protected void onCreate(Bundle savedInstanceState) &#123;</span><br><span class="line">        super.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_main);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果直接启动一个Activity，当我们按下back键返回桌面的时候，oom_adj的值是8，上面已经提到过，这个进程在资源不够的情况下是容易被回收的。现在造一个一个像素的Activity。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">public class LiveActivity extends Activity &#123;</span><br><span class="line"></span><br><span class="line">    public static final String TAG = LiveActivity.class.getSimpleName();</span><br><span class="line"></span><br><span class="line">    public static void actionToLiveActivity(Context pContext) &#123;</span><br><span class="line">        Intent intent = new Intent(pContext, LiveActivity.class);</span><br><span class="line">        intent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK);</span><br><span class="line">        pContext.startActivity(intent);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    protected void onCreate(Bundle savedInstanceState) &#123;</span><br><span class="line">        super.onCreate(savedInstanceState);</span><br><span class="line">        Log.d(TAG, &quot;onCreate&quot;);</span><br><span class="line">        setContentView(R.layout.activity_live);</span><br><span class="line"></span><br><span class="line">        Window window = getWindow();</span><br><span class="line">        //放在左上角</span><br><span class="line">        window.setGravity(Gravity.START | Gravity.TOP);</span><br><span class="line">        WindowManager.LayoutParams attributes = window.getAttributes();</span><br><span class="line">        //宽高设计为1个像素</span><br><span class="line">        attributes.width = 1;</span><br><span class="line">        attributes.height = 1;</span><br><span class="line">        //起始坐标</span><br><span class="line">        attributes.x = 0;</span><br><span class="line">        attributes.y = 0;</span><br><span class="line">        window.setAttributes(attributes);</span><br><span class="line"></span><br><span class="line">        ScreenManager.getInstance(this).setActivity(this);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    protected void onDestroy() &#123;</span><br><span class="line">        super.onDestroy();</span><br><span class="line">        Log.d(TAG, &quot;onDestroy&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>为了做的更隐藏，最好设置一下这个Activity的主题，当然也无所谓了</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;style name=&quot;LiveStyle&quot;&gt;</span><br><span class="line">        &lt;item name=&quot;android:windowIsTranslucent&quot;&gt;true&lt;/item&gt;</span><br><span class="line">        &lt;item name=&quot;android:windowBackground&quot;&gt;@android:color/transparent&lt;/item&gt;</span><br><span class="line">        &lt;item name=&quot;android:windowAnimationStyle&quot;&gt;@null&lt;/item&gt;</span><br><span class="line">        &lt;item name=&quot;android:windowNoTitle&quot;&gt;true&lt;/item&gt;</span><br><span class="line">   &lt;/style&gt;</span><br></pre></td></tr></table></figure><p>在屏幕关闭的时候把LiveActivity启动起来，在开屏的时候把LiveActivity 关闭掉，所以要监听系统锁屏广播，以接口的形式通知MainActivity启动或者关闭LiveActivity。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line">public class ScreenBroadcastListener &#123;</span><br><span class="line"></span><br><span class="line">    private Context mContext;</span><br><span class="line"></span><br><span class="line">    private ScreenBroadcastReceiver mScreenReceiver;</span><br><span class="line"></span><br><span class="line">    private ScreenStateListener mListener;</span><br><span class="line"></span><br><span class="line">    public ScreenBroadcastListener(Context context) &#123;</span><br><span class="line">        mContext = context.getApplicationContext();</span><br><span class="line">        mScreenReceiver = new ScreenBroadcastReceiver();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    interface ScreenStateListener &#123;</span><br><span class="line"></span><br><span class="line">        void onScreenOn();</span><br><span class="line"></span><br><span class="line">        void onScreenOff();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * screen状态广播接收者</span><br><span class="line">     */</span><br><span class="line">    private class ScreenBroadcastReceiver extends BroadcastReceiver &#123;</span><br><span class="line">        private String action = null;</span><br><span class="line"></span><br><span class="line">        @Override</span><br><span class="line">        public void onReceive(Context context, Intent intent) &#123;</span><br><span class="line">            action = intent.getAction();</span><br><span class="line">            if (Intent.ACTION_SCREEN_ON.equals(action)) &#123; // 开屏</span><br><span class="line">                mListener.onScreenOn();</span><br><span class="line">            &#125; else if (Intent.ACTION_SCREEN_OFF.equals(action)) &#123; // 锁屏</span><br><span class="line">                mListener.onScreenOff();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void registerListener(ScreenStateListener listener) &#123;</span><br><span class="line">        mListener = listener;</span><br><span class="line">        registerListener();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private void registerListener() &#123;</span><br><span class="line">        IntentFilter filter = new IntentFilter();</span><br><span class="line">        filter.addAction(Intent.ACTION_SCREEN_ON);</span><br><span class="line">        filter.addAction(Intent.ACTION_SCREEN_OFF);</span><br><span class="line">        mContext.registerReceiver(mScreenReceiver, filter);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">public class ScreenManager &#123;</span><br><span class="line"></span><br><span class="line">    private Context mContext;</span><br><span class="line"></span><br><span class="line">    private WeakReference&lt;Activity&gt; mActivityWref;</span><br><span class="line"></span><br><span class="line">    public static ScreenManager gDefualt;</span><br><span class="line"></span><br><span class="line">    public static ScreenManager getInstance(Context pContext) &#123;</span><br><span class="line">        if (gDefualt == null) &#123;</span><br><span class="line">            gDefualt = new ScreenManager(pContext.getApplicationContext());</span><br><span class="line">        &#125;</span><br><span class="line">        return gDefualt;</span><br><span class="line">    &#125;</span><br><span class="line">    private ScreenManager(Context pContext) &#123;</span><br><span class="line">        this.mContext = pContext;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setActivity(Activity pActivity) &#123;</span><br><span class="line">        mActivityWref = new WeakReference&lt;Activity&gt;(pActivity);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void startActivity() &#123;</span><br><span class="line">            LiveActivity.actionToLiveActivity(mContext);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void finishActivity() &#123;</span><br><span class="line">        //结束掉LiveActivity</span><br><span class="line">        if (mActivityWref != null) &#123;</span><br><span class="line">            Activity activity = mActivityWref.get();</span><br><span class="line">            if (activity != null) &#123;</span><br><span class="line">                activity.finish();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>现在MainActivity改成如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">public class MainActivity extends AppCompatActivity &#123;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    protected void onCreate(Bundle savedInstanceState) &#123;</span><br><span class="line">        super.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_main);</span><br><span class="line">        final ScreenManager screenManager = ScreenManager.getInstance(MainActivity.this);</span><br><span class="line">        ScreenBroadcastListener listener = new ScreenBroadcastListener(this);</span><br><span class="line">         listener.registerListener(new ScreenBroadcastListener.ScreenStateListener() &#123;</span><br><span class="line">            @Override</span><br><span class="line">            public void onScreenOn() &#123;</span><br><span class="line">                screenManager.finishActivity();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            @Override</span><br><span class="line">            public void onScreenOff() &#123;</span><br><span class="line">                screenManager.startActivity();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">root@vbox86p:/ # cat /proc/1887/oom_adj</span><br><span class="line">0</span><br></pre></td></tr></table></figure><p>果然将进程的优先级提高了。</p><p>但是还有一个问题，内存也是一个考虑的因素，内存越多会被最先kill掉，所以把上面的业务逻辑放到Service中，而Service是在另外一个 进程中，在MainActivity开启这个服务就行了，这样这个进程就更加的轻量，<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">public class LiveService extends Service &#123;</span><br><span class="line"></span><br><span class="line">    public  static void toLiveService(Context pContext)&#123;</span><br><span class="line">        Intent intent=new Intent(pContext,LiveService.class);</span><br><span class="line">        pContext.startService(intent);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Nullable</span><br><span class="line">    @Override</span><br><span class="line">    public IBinder onBind(Intent intent) &#123;</span><br><span class="line">        return null;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public int onStartCommand(Intent intent, int flags, int startId) &#123;</span><br><span class="line">        //屏幕关闭的时候启动一个1像素的Activity，开屏的时候关闭Activity</span><br><span class="line">        final ScreenManager screenManager = ScreenManager.getInstance(LiveService.this);</span><br><span class="line">        ScreenBroadcastListener listener = new ScreenBroadcastListener(this);</span><br><span class="line">        listener.registerListener(new ScreenBroadcastListener.ScreenStateListener() &#123;</span><br><span class="line">            @Override</span><br><span class="line">            public void onScreenOn() &#123;</span><br><span class="line">                screenManager.finishActivity();</span><br><span class="line">            &#125;</span><br><span class="line">            @Override</span><br><span class="line">            public void onScreenOff() &#123;</span><br><span class="line">                screenManager.startActivity();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        return START_REDELIVER_INTENT;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;service android:name=&quot;.LiveService&quot;</span><br><span class="line">            android:process=&quot;:live_service&quot;/&gt;</span><br></pre></td></tr></table></figure><p>OK，通过上面的操作，我们的应用就始终和前台进程是一样的优先级了，为了省电，系统检测到锁屏事件后一段时间内会杀死后台进程，如果采取这种方案，就可以避免了这个问题。但是还是有被杀掉的可能，所以我们还需要做双进程守护，关于双进程守护，比较适合的就是aidl的那种方式，但是这个不是完全的靠谱，原理是A进程死的时候，B还在活着，B可以将A进程拉起来，反之，B进程死的时候，A还活着，A可以将B拉起来。所以双进程守护的前提是，系统杀进程只能一个个的去杀，如果一次性杀两个，这种方法也是不OK的。</p><p>事实上<br>那么我们先来看看Android5.0以下的源码，ActivityManagerService是如何关闭在应用退出后清理内存的<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Process.killProcessQuiet(pid);</span><br></pre></td></tr></table></figure></p><p>应用退出后，ActivityManagerService就把主进程给杀死了，但是，在Android5.0以后，ActivityManagerService却是这样处理的：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Process.killProcessQuiet(app.pid);  </span><br><span class="line">Process.killProcessGroup(app.info.uid, app.pid);</span><br></pre></td></tr></table></figure></p><p>在应用退出后，ActivityManagerService不仅把主进程给杀死，另外把主进程所属的进程组一并杀死，这样一来，由于子进程和主进程在同一进程组，子进程在做的事情，也就停止了。所以在Android5.0以后的手机应用在进程被杀死后，要采用其他方案。</p><h4 id="2、前台服务"><a href="#2、前台服务" class="headerlink" title="2、前台服务"></a>2、前台服务</h4><p>这种大部分人都了解，据说这个微信也用过的进程保活方案，移步<a href="http://mt.sohu.com/20160408/n443685317.shtml" target="_blank" rel="noopener">微信Android客户端后台保活经验分享</a>，这方案实际利用了Android前台service的漏洞。<br>原理如下<br>对于 API level &lt; 18 ：调用startForeground(ID， new Notification())，发送空的Notification ，图标则不会显示。<br>对于 API level &gt;= 18：在需要提优先级的service A启动一个InnerService，两个服务同时startForeground，且绑定同样的 ID。Stop 掉InnerService ，这样通知栏图标即被移除。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line">public class KeepLiveService extends Service &#123;</span><br><span class="line"></span><br><span class="line">    public static final int NOTIFICATION_ID=0x11;</span><br><span class="line"></span><br><span class="line">    public KeepLiveService() &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public IBinder onBind(Intent intent) &#123;</span><br><span class="line">        throw new UnsupportedOperationException(&quot;Not yet implemented&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void onCreate() &#123;</span><br><span class="line">        super.onCreate();</span><br><span class="line">         //API 18以下，直接发送Notification并将其置为前台</span><br><span class="line">        if (Build.VERSION.SDK_INT &lt;Build.VERSION_CODES.JELLY_BEAN_MR2) &#123;</span><br><span class="line">            startForeground(NOTIFICATION_ID, new Notification());</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            //API 18以上，发送Notification并将其置为前台后，启动InnerService</span><br><span class="line">            Notification.Builder builder = new Notification.Builder(this);</span><br><span class="line">            builder.setSmallIcon(R.mipmap.ic_launcher);</span><br><span class="line">            startForeground(NOTIFICATION_ID, builder.build());</span><br><span class="line">            startService(new Intent(this, InnerService.class));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public  class  InnerService extends Service&#123;</span><br><span class="line">        @Override</span><br><span class="line">        public IBinder onBind(Intent intent) &#123;</span><br><span class="line">            return null;</span><br><span class="line">        &#125;</span><br><span class="line">        @Override</span><br><span class="line">        public void onCreate() &#123;</span><br><span class="line">            super.onCreate();</span><br><span class="line">            //发送与KeepLiveService中ID相同的Notification，然后将其取消并取消自己的前台显示</span><br><span class="line">            Notification.Builder builder = new Notification.Builder(this);</span><br><span class="line">            builder.setSmallIcon(R.mipmap.ic_launcher);</span><br><span class="line">            startForeground(NOTIFICATION_ID, builder.build());</span><br><span class="line">            new Handler().postDelayed(new Runnable() &#123;</span><br><span class="line">                @Override</span><br><span class="line">                public void run() &#123;</span><br><span class="line">                    stopForeground(true);</span><br><span class="line">                    NotificationManager manager = (NotificationManager) getSystemService(NOTIFICATION_SERVICE);</span><br><span class="line">                    manager.cancel(NOTIFICATION_ID);</span><br><span class="line">                    stopSelf();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;,100);</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在没有采取前台服务之前，启动应用，oom_adj值是0，按下返回键之后，变成9（不同ROM可能不一样）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">root@vbox86p:/ # cat /proc/1887/oom_adj</span><br><span class="line">0</span><br><span class="line">root@vbox86p:/ # cat /proc/1887/oom_adj</span><br><span class="line">9</span><br></pre></td></tr></table></figure><p>在采取前台服务之后，启动应用，oom_adj值是0，按下返回键之后，变成2（不同ROM可能不一样），确实进程的优先级有所提高。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">root@vbox86p:/ # cat /proc/1887/oom_adj</span><br><span class="line">0</span><br><span class="line">root@vbox86p:/ # cat /proc/1887/oom_adj</span><br><span class="line">2</span><br></pre></td></tr></table></figure></p><h4 id="3、相互唤醒"><a href="#3、相互唤醒" class="headerlink" title="3、相互唤醒"></a>3、相互唤醒</h4><p>相互唤醒的意思就是，假如你手机里装了支付宝、淘宝、天猫、UC等阿里系的app，那么你打开任意一个阿里系的app后，有可能就顺便把其他阿里系的app给唤醒了。这个完全有可能的。此外，开机，网络切换、拍照、拍视频时候，利用系统产生的广播也能唤醒app，不过Android N已经将这三种广播取消了。<br><img src="http://upload-images.jianshu.io/upload_images/1836169-23a164e920543f25.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"><br><img src="http://upload-images.jianshu.io/upload_images/1836169-26955fbc66eaccfb.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"><br>如果应用想保活，要是QQ，微信愿意救你也行，有多少手机上没有QQ，微信呢？或者像友盟，信鸽这种推送SDK，也存在唤醒app的功能。<br>拉活方法</p><h4 id="4、JobSheduler"><a href="#4、JobSheduler" class="headerlink" title="4、JobSheduler"></a>4、JobSheduler</h4><p>JobSheduler是作为进程死后复活的一种手段，native进程方式最大缺点是费电， Native 进程费电的原因是感知主进程是否存活有两种实现方式，在 Native 进程中通过死循环或定时器，轮训判断主进程是否存活，当主进程不存活时进行拉活。其次5.0以上系统不支持。 但是JobSheduler可以替代在Android5.0以上native进程方式，这种方式即使用户强制关闭，也能被拉起来，亲测可行。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">JobSheduler@TargetApi(Build.VERSION_CODES.LOLLIPOP)</span><br><span class="line">public class MyJobService extends JobService &#123;</span><br><span class="line">    @Override</span><br><span class="line">    public void onCreate() &#123;</span><br><span class="line">        super.onCreate();</span><br><span class="line">        startJobSheduler();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void startJobSheduler() &#123;</span><br><span class="line">        try &#123;</span><br><span class="line">            JobInfo.Builder builder = new JobInfo.Builder(1, new ComponentName(getPackageName(), MyJobService.class.getName()));</span><br><span class="line">            builder.setPeriodic(5);</span><br><span class="line">            builder.setPersisted(true);</span><br><span class="line">            JobScheduler jobScheduler = (JobScheduler) this.getSystemService(Context.JOB_SCHEDULER_SERVICE);</span><br><span class="line">            jobScheduler.schedule(builder.build());</span><br><span class="line">        &#125; catch (Exception ex) &#123;</span><br><span class="line">            ex.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public boolean onStartJob(JobParameters jobParameters) &#123;</span><br><span class="line">        return false;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public boolean onStopJob(JobParameters jobParameters) &#123;</span><br><span class="line">        return false;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="5、粘性服务-amp-与系统服务捆绑"><a href="#5、粘性服务-amp-与系统服务捆绑" class="headerlink" title="5、粘性服务&amp;与系统服务捆绑"></a>5、粘性服务&amp;与系统服务捆绑</h4><p>这个是系统自带的，onStartCommand方法必须具有一个整形的返回值，这个整形的返回值用来告诉系统在服务启动完毕后，如果被Kill，系统将如何操作，这种方案虽然可以，但是在某些情况or某些定制ROM上可能失效，我认为可以多做一种保保守方案。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">public int onStartCommand(Intent intent, int flags, int startId) &#123;</span><br><span class="line">    return START_REDELIVER_INTENT;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><ul><li><p>START_STICKY<br>如果系统在onStartCommand返回后被销毁，系统将会重新创建服务并依次调用onCreate和onStartCommand（注意：根据测试Android2.3.3以下版本只会调用onCreate根本不会调用onStartCommand，Android4.0可以办到），这种相当于服务又重新启动恢复到之前的状态了）。</p></li><li><p>START_NOT_STICKY<br>如果系统在onStartCommand返回后被销毁，如果返回该值，则在执行完onStartCommand方法后如果Service被杀掉系统将不会重启该服务。</p></li><li><p>START_REDELIVER_INTENT<br>START_STICKY的兼容版本，不同的是其不保证服务被杀后一定能重启。</p></li></ul><p>相比与粘性服务与系统服务捆绑更厉害一点，这个来自爱哥的研究，这里说的系统服务很好理解，比如NotificationListenerService，NotificationListenerService就是一个监听通知的服务，只要手机收到了通知，NotificationListenerService都能监听到，即时用户把进程杀死，也能重启，所以说要是把这个服务放到我们的进程之中，那么就可以呵呵了</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">@TargetApi(Build.VERSION_CODES.JELLY_BEAN_MR2)</span><br><span class="line">public class LiveService extends NotificationListenerService &#123;</span><br><span class="line"></span><br><span class="line">    public LiveService() &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void onNotificationPosted(StatusBarNotification sbn) &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void onNotificationRemoved(StatusBarNotification sbn) &#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>但是这种方式需要权限<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;service</span><br><span class="line">            android:name=&quot;.LiveService&quot;</span><br><span class="line">            android:permission=&quot;android.permission.BIND_NOTIFICATION_LISTENER_SERVICE&quot;&gt;</span><br><span class="line">            &lt;intent-filter&gt;</span><br><span class="line">                &lt;action android:name=&quot;android.service.notification.NotificationListenerService&quot; /&gt;</span><br><span class="line">            &lt;/intent-filter&gt;</span><br><span class="line">        &lt;/service&gt;</span><br></pre></td></tr></table></figure></p><p>所以你的应用要是有消息推送的话，那么可以用这种方式去欺骗用户。</p><p>结束：<br>听说账号同步唤醒APP这种机制很不错，用户强制停止都杀不起创建一个账号并设置同步器，创建周期同步，系统会自动调用同步器，这样就能激活我们的APP，局限是国产机会修改最短同步周期（魅蓝NOTE2长达30分钟），并且需要联网才能使用。在国内各大ROM”欣欣向荣”的大背景下，关于进程保活，不加入白名单，我也很想知道有没有一个应用永活的方案，这种方案性能好，不费电，或许做不到，或许有牛人可以，但是，通过上面几种措施，在绝大部分的机型下，绝大部分用户手机中，我们的进程寿命确实得到了提高。<br>参考链接：</p><p><a href="http://www.jcodecraeer.com/a/anzhuokaifa/androidkaifa/2016/0418/4158.html" target="_blank" rel="noopener">关于 Android 进程保活，你所需要知道的一切http://www.jcodecraeer.com/a/anzhuokaifa/androidkaifa/2016/0418/4158.html</a></p><p><a href="http://blog.csdn.net/aigestudio/article/details/51348408" target="_blank" rel="noopener">论Android应用进程长存的可行性http://blog.csdn.net/aigestudio/article/details/51348408</a></p><p><a href="http://mp.weixin.qq.com/s?__biz=MzI0MjE3OTYwMg==&amp;mid=401629367&amp;idx=1&amp;sn=9f086cfdc00f954e21e6a6253f1ae288&amp;scene=21#wechat_redirect" target="_blank" rel="noopener">Android 通过JNI实现守护进程，使Service服务不被杀死 http://mp.weixin.qq.com/s?__biz=MzI0MjE3OTYwMg==&amp;mid=401629367&amp;idx=1&amp;sn=9f086cfdc00f954e21e6a6253f1ae288&amp;scene=21#wechat_redirect</a></p>]]></content>
      
      
        <tags>
            
            <tag> Android 进程 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>React-Native与Android原生混合开发交互</title>
      <link href="/2017/07/20/React-Native%20%E4%B8%8EAndroid%E5%8E%9F%E7%94%9F%E6%B7%B7%E5%90%88%E5%BC%80%E5%8F%91%E4%BA%A4%E4%BA%92/"/>
      <url>/2017/07/20/React-Native%20%E4%B8%8EAndroid%E5%8E%9F%E7%94%9F%E6%B7%B7%E5%90%88%E5%BC%80%E5%8F%91%E4%BA%A4%E4%BA%92/</url>
      <content type="html"><![CDATA[<ol><li>首先用Android Studio 创建一个正常的Android项目，最低版本改成4.1</li><li><p>确定安装npm后</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">npm init</span><br><span class="line">```  </span><br><span class="line">然后通过</span><br></pre></td></tr></table></figure><p> npm install –save react react-native<br>  <code>`</code></p></li><li><p>在项目目录下下载.flowconfig 地址<a href="https://raw.githubusercontent.com/facebook/react-native/master/.flowconfig" target="_blank" rel="noopener">https://raw.githubusercontent.com/facebook/react-native/master/.flowconfig</a> （可通过curl下载）</p></li><li><p>在package.json添加 “start”:”node node_modules/react-native/local-cli/cli.js start”</p></li><li><p>在安装应用之后，打不开react-native页面报（Uable to load script form assets ‘index.androlid bundle’.Make sure your bundle is packaged correctly or you`re running a packager server.）<br>解决的方法：把 node_modules/react-native/local-cli/server/server.js 代码 （process.exit(11)）注释</p></li><li><p>添加index.android.js文件到项目目录下写react-native代码</p></li><li><p>在app-&gt;build.gradle下添加react-native依赖包compile “com.facebook.react:react-native:+”</p></li><li><p>在项目下build.gradle -&gt;allprojects -&gt;repositories -&gt;maven 添加<br>url “$rootDir/node_modules/react-native/android”</p></li><li><p>在AndroidManifest.xml添加Internet权限，访问网络必须</p></li><li><p>创建一个activity继承ReactActivity重写getMainComponetName方法<br>返回 在index.android.js中 （AppRegister.registerComponent(‘HelloWorld) =&gt;HelloWorld）<br>中注册的名字</p></li><li><p>创建MyApplication 继承Application 实现接口ReactApplication 实现getReactNativeHost</p></li></ol>]]></content>
      
      
        <tags>
            
            <tag> Android React-Native </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Vue 初探</title>
      <link href="/2017/06/22/vue%E5%88%9D%E6%8E%A2/"/>
      <url>/2017/06/22/vue%E5%88%9D%E6%8E%A2/</url>
      <content type="html"><![CDATA[<h6 id="因为公司为了更好的适应快速迭代开发和避免Apple-Store-审核决定使用Vue和原生混合开发，把公司重要的，变动较大的流程部分用Vue来进行开发为此-让我们来认识一下Vue-吧"><a href="#因为公司为了更好的适应快速迭代开发和避免Apple-Store-审核决定使用Vue和原生混合开发，把公司重要的，变动较大的流程部分用Vue来进行开发为此-让我们来认识一下Vue-吧" class="headerlink" title="因为公司为了更好的适应快速迭代开发和避免Apple Store 审核决定使用Vue和原生混合开发，把公司重要的，变动较大的流程部分用Vue来进行开发为此==让我们来认识一下Vue 吧=="></a>因为公司为了更好的适应快速迭代开发和避免Apple Store 审核决定使用Vue和原生混合开发，把公司重要的，变动较大的流程部分用Vue来进行开发为此==让我们来认识一下Vue 吧==</h6><ol><li><p>为什么要选择vue.js来作为混合开发呢？让我们来看看他的优点吧！</p><ul><li>vue.js上手比较简单，只要有点前端html知识的人，都能很容易上手</li><li>可高度组件化，复用性高，开发快捷</li><li>vue.js本身比较轻便，不像react和AngularJS过于沉重复杂，（==对我们这种做原生应用的前端小白来说啊==）</li><li>最后就是给予weex较大期望，以后方便通用。快速移植</li></ul></li><li><p>首先vue.js的中文<a href="https://cn.vuejs.org/v2/guide/index.html" target="_blank" rel="noopener">官网</a></p><p> <del>vue.js它不支持IE8及以下的浏览器，如果要兼容一些古董类型浏览器的，vue.js就不是你的菜了，可以考虑<a href="http://avalonjs.github.io/" target="_blank" rel="noopener">avalon</a></del></p></li><li><p>打开cmd终端 安装vue-cli脚手架工具</p></li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><span class="line">#安装脚手架工具</span><br><span class="line">npm install vue-cli -g</span><br><span class="line"></span><br><span class="line">#新建初始化项目</span><br><span class="line">D:\workspace&gt; vue init webpack my-project</span><br><span class="line"></span><br><span class="line">  A newer version of vue-cli is available.</span><br><span class="line"></span><br><span class="line">  latest:    2.9.6</span><br><span class="line">  installed: 2.9.2</span><br><span class="line"></span><br><span class="line">? Project name my-project</span><br><span class="line">? Project description A Vue.js project</span><br><span class="line">? Author Tim &lt;wl52056@163.com&gt;</span><br><span class="line">? Vue build standalone</span><br><span class="line">? Install vue-router? Yes</span><br><span class="line">? Use ESLint to lint your code? Yes</span><br><span class="line">? Pick an ESLint preset Standard</span><br><span class="line">? Set up unit tests No</span><br><span class="line">? Setup e2e tests with Nightwatch? Yes</span><br><span class="line">? Should we run `npm install` for you after the project has been created? (reco</span><br><span class="line">mmended) npm</span><br><span class="line"></span><br><span class="line">   vue-cli · Generated &quot;my-project&quot;.</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># Installing project dependencies ...</span><br><span class="line"># ========================</span><br><span class="line"></span><br><span class="line">npm WARN deprecated socks@1.1.10: If using 2.x branch, please upgrade to at leas</span><br><span class="line">t 2.1.6 to avoid a serious bug with socket data flow and an import issue introdu</span><br><span class="line">ced in 2.1.0</span><br><span class="line"></span><br><span class="line">&gt; chromedriver@2.40.0 install D:\workspace\my-project\node_modules\chromedriver</span><br><span class="line">&gt; node install.js</span><br><span class="line"></span><br><span class="line">Downloading https://chromedriver.storage.googleapis.com/2.40/chromedriver_win32.</span><br><span class="line">zip</span><br><span class="line">Saving to C:\Users\admin\AppData\Local\Temp\chromedriver\chromedriver_win32.zip</span><br><span class="line">Received 781K...</span><br><span class="line">Received 1575K...</span><br><span class="line">Received 2359K...</span><br><span class="line">Received 3143K...</span><br><span class="line">Received 3376K total.</span><br><span class="line">Extracting zip contents</span><br><span class="line">Copying to target path D:\workspace\my-project\node_modules\chromedriver\lib\chr</span><br><span class="line">omedriver</span><br><span class="line">Done. ChromeDriver binary available at D:\workspace\my-project\node_modules\chro</span><br><span class="line">medriver\lib\chromedriver\chromedriver.exe</span><br><span class="line"></span><br><span class="line">&gt; uglifyjs-webpack-plugin@0.4.6 postinstall D:\workspace\my-project\node_modules</span><br><span class="line">\webpack\node_modules\uglifyjs-webpack-plugin</span><br><span class="line">&gt; node lib/post_install.js</span><br><span class="line"></span><br><span class="line">npm notice created a lockfile as package-lock.json. You should commit this file.</span><br><span class="line"></span><br><span class="line">npm WARN optional SKIPPING OPTIONAL DEPENDENCY: fsevents@1.2.4 (node_modules\fse</span><br><span class="line">vents):</span><br><span class="line">npm WARN notsup SKIPPING OPTIONAL DEPENDENCY: Unsupported platform for fsevents@</span><br><span class="line">1.2.4: wanted &#123;&quot;os&quot;:&quot;darwin&quot;,&quot;arch&quot;:&quot;any&quot;&#125; (current: &#123;&quot;os&quot;:&quot;win32&quot;,&quot;arch&quot;:&quot;x64&quot;&#125;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">added 1414 packages in 121.681s</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Running eslint --fix to comply with chosen preset rules...</span><br><span class="line"># ========================</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&gt; my-project@1.0.0 lint D:\workspace\my-project</span><br><span class="line">&gt; eslint --ext .js,.vue src test/e2e/specs &quot;--fix&quot;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># Project initialization finished!</span><br><span class="line"># ========================</span><br><span class="line"></span><br><span class="line">To get started:</span><br><span class="line"></span><br><span class="line">  cd my-project</span><br><span class="line">  npm run dev</span><br><span class="line"></span><br><span class="line">Documentation can be found at https://vuejs-templates.github.io/webpack</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">D:\workspace&gt;cd my-project &amp;&amp; npm run dev</span><br><span class="line"> DONE  Compiled successfully in 3470ms                                  14:35:32</span><br><span class="line"></span><br><span class="line"> I  Your application is running here: http://localhost:8080</span><br></pre></td></tr></table></figure><p>感觉就是一路的回车，然后就。。。<br>说明整个创建vue项目已经成功，然后就在浏览器打开<a href="http://localhost:8080" target="_blank" rel="noopener">http://localhost:8080</a></p><p>.vue文件的template标签下写html代码</p><p>在script写你的javascript代码，<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> default &#123;</span><br><span class="line">  name: <span class="string">'HelloWorld'</span>,</span><br><span class="line">  <span class="function"><span class="title">data</span></span> () &#123;</span><br><span class="line">    <span class="built_in">return</span> &#123;</span><br><span class="line">      msg: <span class="string">'Hello World'</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>style下尽情的写你那牛逼的特效</p>]]></content>
      
      
        <tags>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Hexo 快速构建属于你自己的blog</title>
      <link href="/2017/05/04/Hexo%20%E5%BF%AB%E9%80%9F%E6%9E%84%E5%BB%BAblog/"/>
      <url>/2017/05/04/Hexo%20%E5%BF%AB%E9%80%9F%E6%9E%84%E5%BB%BAblog/</url>
      <content type="html"><![CDATA[<p>博客这个东西，很早就想弄一下了今天弄一个玩玩</p><h2 id="第一步-环境配置篇"><a href="#第一步-环境配置篇" class="headerlink" title="第一步 环境配置篇"></a>第一步 环境配置篇</h2><h3 id="安装node环境-可查看node"><a href="#安装node环境-可查看node" class="headerlink" title="安装node环境  可查看node"></a>安装node环境  可查看<a href="https://node.org" target="_blank" rel="noopener">node</a></h3><p> <strong>以linux系统为例：</strong></p><p>我这里使用的 <font color="#FF0000" size="6">nvm</font> node版本管理器</p><ul><li>首先下载nvm<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">    wget -qO- https://raw.githubusercontent.com/creationix/nvm/v0.33.2/install.sh | bash</span><br><span class="line">```  </span><br><span class="line"></span><br><span class="line">安装完成之后</span><br><span class="line">+ 配置nvm环境变量</span><br><span class="line">``` bash</span><br><span class="line">    vim ~/.bash_profiles</span><br><span class="line">``` </span><br><span class="line"></span><br><span class="line">+ 粘贴线代码到文件末尾</span><br><span class="line">``` bash</span><br><span class="line">    <span class="built_in">export</span> NVM_DIR=<span class="string">"<span class="variable">$HOME</span>/.nvm"</span></span><br><span class="line">    [ -s <span class="string">"<span class="variable">$NVM_DIR</span>/nvm.sh"</span> ] &amp;&amp; . <span class="string">"<span class="variable">$NVM_DIR</span>/nvm.sh"</span> <span class="comment"># This loads nvm</span></span><br><span class="line">``` </span><br><span class="line"></span><br><span class="line">+ 执行 生效环境变量</span><br><span class="line">``` bash</span><br><span class="line">    <span class="built_in">source</span> ~/.bash_profiles</span><br><span class="line">``` </span><br><span class="line"></span><br><span class="line"><span class="comment">### 验证 &lt;font color=#FF0000 size=6 &gt;nvm&lt;/font&gt; 是否安装成功    </span></span><br><span class="line">+ 执行nvm</span><br><span class="line">``` bash</span><br><span class="line">    $ nvm --verion</span><br><span class="line">    0.33.0</span><br><span class="line">``` </span><br><span class="line">打印版本号，说明安装成功</span><br><span class="line">+ 安装node</span><br><span class="line">```bash</span><br><span class="line"><span class="comment">#查看当前所有的node版本</span></span><br><span class="line">nvm ls-remote</span><br><span class="line"><span class="comment">#选择一个安装</span></span><br><span class="line">nvm install v8.9.0</span><br></pre></td></tr></table></figure></li></ul><h3 id="在本地安装-hexo-详情可以参考这个网站"><a href="#在本地安装-hexo-详情可以参考这个网站" class="headerlink" title="在本地安装  hexo[详情可以参考这个网站]"></a>在本地安装  <a href="https://hexo.io" target="_blank" rel="noopener">hexo</a>[详情可以参考这个网站]</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#全局安装hexo脚手架</span></span><br><span class="line">npm install hexo-cli -g</span><br></pre></td></tr></table></figure><h2 id="博客构建篇"><a href="#博客构建篇" class="headerlink" title="博客构建篇"></a>博客构建篇</h2><h3 id="创建一个项目"><a href="#创建一个项目" class="headerlink" title="创建一个项目"></a>创建一个项目</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>更多信息可<a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">参考</a></p><h3 id="运行hexo服务"><a href="#运行hexo服务" class="headerlink" title="运行hexo服务"></a>运行hexo服务</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>更多信息可<a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">参考</a></p><h3 id="生成博文静态文件"><a href="#生成博文静态文件" class="headerlink" title="生成博文静态文件"></a>生成博文静态文件</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>更多信息可<a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">参考</a></p><h3 id="部署文件到你的git"><a href="#部署文件到你的git" class="headerlink" title="部署文件到你的git"></a>部署文件到你的git</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>更多信息可<a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">参考</a></p>]]></content>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Android 跨进程通讯</title>
      <link href="/2017/03/20/Android%E8%B7%A8%E8%BF%9B%E7%A8%8B%E9%80%9A%E8%AE%AF/"/>
      <url>/2017/03/20/Android%E8%B7%A8%E8%BF%9B%E7%A8%8B%E9%80%9A%E8%AE%AF/</url>
      <content type="html"><![CDATA[<h1 id="Android-跨进程通讯"><a href="#Android-跨进程通讯" class="headerlink" title="Android 跨进程通讯"></a>Android 跨进程通讯</h1><ol><li><p>首先新建一个自定义实体类：Person 实现 Parcelable 接口，</p></li><li><p>新建一个与类名相同的aidl的文件，主要两个的包名必须相同，<br>只写一句代码 parcelable Person;</p></li><li><p>在新建一个aidl的文件（例：IManagerPerson.aidl） 在接口中使用 实体类 例：sendMessage(Person ps);<br>并import导入Person类的完整路径</p></li><li><p>新建一个service 实现onCreate(),onStartCommand(),和onBind()方法<br>并且继承IManagerPerson.Stub重新sendMessage方法，在onBind()方法中return IManagerPerson.Stub的实例<br>在intent-filter设置action名字方便启动</p></li><li><p>在Activity中使用：<br>实例一个ServiceConnection 实现onServiceConnected(),onSreviceDisconnected()<br>在onServiceConnected()方法中通过IManagerPerson.Stub.asInterface(service);<br>获取IManagerPerson实例，通过onbind启动service，记得unbindService,然后就可以通过<br>IManagerPerson跨进程调用方法</p></li></ol>]]></content>
      
      
        <tags>
            
            <tag> Android </tag>
            
        </tags>
      
    </entry>
    
  
  
</search>
